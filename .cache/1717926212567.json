{"date":"2024-06-09T09:43:31.545Z","courseId":"17","assignment":"AP-Spring03-CA6-phase3","trace":{"version":9,"content":"#include \"response.hpp\"\n#include \"Global.hpp\"\n#include \"include.hpp\"\n\nconst std::unordered_map<Response::Status, std::string> Response::phraseMap_ = {\n    {Status::ok, \"OK\"},\n    {Status::created, \"Created\"},\n\n    {Status::movedPermanently, \"Moved Permanently\"},\n    {Status::seeOther, \"See Other\"},\n\n    {Status::badRequest, \"Bad Request\"},\n    {Status::unauthorized, \"Unauthorized\"},\n    {Status::forbidden, \"Forbidden\"},\n    {Status::notFound, \"Not Found\"},\n    {Status::methodNotAllowed, \"Method Not Allowed\"},\n    {Status::conflict, \"Conflict\"},\n    {Status::teapot, \"I'm a teapot\"},\n\n    {Status::internalServerError, \"Internal Server Error\"},\n    {Status::notImplemented, \"Not Implemented\"},\n};\n\nResponse::Response(Status code)\n    : code_(static_cast<int>(code)),\n      phrase_(phraseMap_.find(code)->second) {\n    headers_[\"Content-Type\"] = \"text/plain\";\n}\n\nResponse::Response(int code, const std::string& phrase)\n    : code_(code),\n      phrase_(phrase) {\n    headers_[\"Content-Type\"] = \"text/plain\";\n}\n\nvoid Response::setHeader(const std::string& key, const std::string& value) {\n    headers_[key] = value;\n}\n\nvoid Response::setBody(const std::string& body) {\n    body_ = body;\n}\n\nvoid Response::setSessionId(const std::string& sessionId) {\n    setHeader(\"set-cookie\", \"sessionId=\" + sessionId + \";\");\n}\n\nstd::string Response::getHeader() const {\n    std::string header;\n    header += \"HTTP/1.0 \" + std::to_string(code_) + \" \" + phrase_ + \"\\r\\n\";\n    header += \"Server: \" + SERVER_NAME + \" \\r\\n\";\n    header += \"Content-Length: \" + std::to_string(body_.size()) + \"\\r\\n\";\n    for (auto itr = headers_.begin(); itr != headers_.end(); ++itr) {\n        header += itr->first + \": \" + itr->second + \"\\r\\n\";\n    }\n    header += \"\\r\\n\";\n    return header;\n}\n\nstd::string Response::getResponse() const {\n    return getHeader() + body_;\n}\n\nvoid Response::log(bool showBody) const {\n    const std::string NC = \"\\033[0;39m\";\n    const std::string K = \"\\033[1m\";\n    const std::string H = \"\\033[34;1m\";\n    const std::string G = \"\\033[32m\";\n    const std::string R = \"\\033[31m\";\n\n    std::string log;\n    log += H + \"------- Response -------\" + NC + \"\\n\";\n    log += K + \"Status: \" + NC + (code_ == 200 ? G : R) + std::to_string(code_) + \" \" + phrase_ + NC + \"\\n\";\n    log += K + \"Headers:\" + NC + \"\\n\";\n\n    for (auto itr = headers_.begin(); itr != headers_.end(); ++itr) {\n        log += \"  \" + utils::urlDecode(itr->first) + \": \" + utils::urlDecode(itr->second) + \"\\n\";\n    }\n    if (showBody) {\n        log += K + \"Body:\\n\" + NC + body_ + \"\\n\";\n    }\n    log += H + \"------------------------\" + NC + \"\\n\";\n    std::clog << log << std::endl;\n}\n\nResponse* Response::redirect(const std::string& url) {\n    Response* res = new Response(Status::seeOther);\n    res->setHeader(\"Location\", url);\n    return res;\n}\n","filename":"/Users/mahdis/Desktop/AP/AP6/src/response.cpp","identifier":"Text Change","lineCount":91,"languageId":"cpp"},"failed":false}