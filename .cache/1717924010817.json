{"date":"2024-06-09T09:06:45.986Z","courseId":"17","assignment":"AP-Spring03-CA6-phase3","trace":{"version":48,"content":"#include \"University.hpp\"\n#include \"Primary.hpp\"\n\nUniversity::University() {\n    user = nullptr;\n    course_offer_id = START_ID;\n    current_course_offer = INVALID;\n    extra_output.clear();\n}\n\nvoid University::addMajor(string id, string name) {\n    majors.push_back(new Major(id, name));\n}\n\nvoid University::addStudent(string id, string name, Major* major, int semester, string password) {\n    people.push_back(new Student(id, name, major, semester, password));\n}\n\nvoid University::addCourse(string id, string name, int credit, int prerequisite, vector<string> majors_id) {\n    courses.push_back(new Course(id, name, credit, prerequisite, majors_id));\n}\n\nvoid University::addProfessor(string id, string name, Major* major, string string_position, string password) {\n    people.push_back(new Professor(id, name, major, string_position, password));\n}\n\nvoid University::catchError(runtime_error& ex) {\n    output.push_back(string(ex.what()) + END_LINE);\n}\n\nbool University::checkValidPassword(string id, string password) {\n    for(int i = 0; i < people.size(); i++) {\n        if(people[i]->getId() == id and people[i]->getPassword() == password) {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool University::isStudent() {\n    if(user->getPeopleType() == _STUDENT) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nbool University::checkLogin() {\n    if(user != nullptr) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nbool University::checkValidId(string id) {\n    for(int i = 0; i < people.size(); i++) {\n        if(people[i]->getId() == id) {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool University::checkValidCourse(string id) {\n    for(int i = 0; i < courses.size(); i++) {\n        if(courses[i]->getId() == id) {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool University::isProfessor(string id) {\n    for(int i = 0; i < people.size(); i++) {\n        if(people[i]->getPeopleType() == _PROFESSOR and people[i]->getId() == id) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint University::findPeopleIndexById(string id) {\n    for(int i = 0; i < people.size(); i++) {\n        if(people[i]->getId() == id) {\n            return i;\n        }\n    }\n}\n\nbool University::inCommonTime(string professor_id, string time) {\n    int professor_index = findPeopleIndexById(professor_id);\n    Time new_time(time);\n    if(people[professor_index]->validCourseTime(new_time)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n\n}\n\nint University::findMajor(string id) {\n    for(int i = 0; i < majors.size(); i++) {\n        if(majors[i]->getId() == id) {\n            return i;\n        }\n    }\n}\n\nint University::findCourseIndexById(string id) {\n    for(int i = 0; i < courses.size(); i++) {\n        if(courses[i]->getId() == id) {\n            return i;\n        }\n    }\n}\n\nbool University::isPresentByProfessor(string professor_id, string course_id) {\n    int professor_index = findPeopleIndexById(professor_id);\n    int course_index = findCourseIndexById(course_id);\n    return courses[course_index]->hasMajor(people[professor_index]->getMajorId());\n}\n\nvoid University::showOneCourseOffers(int index) {\n    output.push_back(to_string(all_course_offers[index]->getCourseOfferId()) + SPACE);\n    output.push_back(all_course_offers[index]->getName() + SPACE);\n    output.push_back(to_string(all_course_offers[index]->getCapacity()) + SPACE);\n    output.push_back(people[findPeopleIndexById(all_course_offers[index]->getProfessorId())]->getName() + SPACE);\n    output.push_back(all_course_offers[index]->getTime()  + SPACE);\n    output.push_back(all_course_offers[index]->getExamTime() + SPACE);\n    output.push_back(to_string(all_course_offers[index]->getClassNumber()) + END_LINE);\n}\n\n\nvoid University::addNotificationCoursePost(int index, string notification_line) {\n    for(int i = 0; i < all_course_offers[index]->getStudents().size(); i++) {\n        people[findPeopleIndexById(all_course_offers[index]->getStudents()[i])]->addNotification(notification_line);\n    }\n    if(user->getPeopleType() != _PROFESSOR) {\n        people[findPeopleIndexById(all_course_offers[index]->getProfessorId())]->addNotification(notification_line);\n    }\n    for(int i = 0; i < all_course_offers[index]->getTaIds().size(); i++) {\n        if(user->getId() == all_course_offers[index]->getTaIds()[i]) {\n            continue;\n        }\n        else {\n            people[findPeopleIndexById(all_course_offers[index]->getTaIds()[i])]->addNotification(notification_line);\n        }\n    }\n}\n\nvoid University::showAllCourseOffers() {\n    for(int i = 0; i < all_course_offers.size(); i++) {\n        output.push_back(to_string(all_course_offers[i]->getCourseOfferId()) + SPACE);\n        output.push_back(all_course_offers[i]->getName()  + SPACE);\n        output.push_back(to_string(all_course_offers[i]->getCapacity()) + SPACE);\n        output.push_back(people[findPeopleIndexById(all_course_offers[i]->getProfessorId())]->getName() + END_LINE);\n    }\n}\n\nMajor* University::getMajorById(int index) {\n    return majors[index];\n}\n\nvoid University::makeExtraOutput(vector<string> requested_TAs, int index) {\n    for(int i = 0; i < requested_TAs.size(); i++) {\n        extra_output.push_back(requested_TAs[i] + SPACE + people[findPeopleIndexById(requested_TAs[i])]->getName() + SPACE + to_string(people[findPeopleIndexById(requested_TAs[i])]->getSemester()) + COLON + SPACE);\n    }\n    current_course_offer = index;\n}\n\nvoid University::askProfessorForTA(int index) {\n    current_course_offer = index;\n    output.push_back(TA_FORM_FIRST + to_string(all_course_offers[index]->getRequestedTA().size()) + SPACE + TA_FORM_SECOND + END_LINE);\n    makeExtraOutput(all_course_offers[index]->getRequestedTA(), index);\n}\n\nvoid University::cleanCloseForm() {\n    if(current_course_offer == INVALID) {\n        return;\n    }\n    for(int i = 0; i < all_course_offers[current_course_offer]->getRequestedTA().size(); i++) {\n        string ta_id = all_course_offers[current_course_offer]->getRequestedTA()[i];\n        if(closeFormResult[i]) {\n            all_course_offers[current_course_offer]->addTA(ta_id);\n            people[findPeopleIndexById(ta_id)]->addNotification(to_string(current_course_offer + 1) + SPACE + all_course_offers[current_course_offer]->getName() + ACCEPT_NOTIFICAION + END_LINE);\n        }\n        else {\n            people[findPeopleIndexById(ta_id)]->addNotification(to_string(current_course_offer + 1) + SPACE + all_course_offers[current_course_offer]->getName() + REJECT_NOTIFICAION + END_LINE);\n        }\n    }\n    all_course_offers[current_course_offer]->cleanTARequested();\n    current_course_offer = INVALID;\n    closeFormResult.clear();\n    extra_output.clear();\n}\n\n\nvoid University::makeDefaultConnections() {\n    people.push_back(new UTAccount(ZERO_STRING, UT_ACCOUNT));\n    for(int i = 0; i + 1 < people.size(); i++) {\n        people[i]->addConnection(people.back());\n        people.back()->addConnection(people[i]);\n    }\n}\n\nvoid University::runAddProfile(string address) {\n    if(!checkLogin()) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(user->getId() == ZERO_STRING) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else {\n        user->addProfile(address);\n        throw runtime_error(OK);\n    }\n}\n\nvoid University::runGetCourseChannel(string id) {\n    if(!checkLogin()) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(user->getId() == ZERO_STRING) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(!isNumber(id)) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(stoi(id) == 0) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(stoi(id) >= course_offer_id) {\n        throw runtime_error(NOT_FOUND);\n    }\n    else if(!all_course_offers[stoi(id) - 1]->isInCourse(user->getId())) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else {\n        showOneCourseOffers(stoi(id) - 1);\n        all_course_offers[stoi(id) - 1]->showPostsCourseChannel(output);\n    }\n}\n\nvoid University::runCoursePost(string id = DEFINE_STRING, string title = DEFINE_STRING, string message = DEFINE_STRING, string image_address = DEFINE_STRING) {\n    if(!checkLogin()) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(id == DEFINE_STRING || title == DEFINE_STRING || message == DEFINE_STRING) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(!isNumber(id)) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(stoi(id) == ZERO) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(stoi(id) >= course_offer_id) {\n        throw runtime_error(NOT_FOUND);\n    }\n    else if(user->getPeopleType() == _STUDENT and !all_course_offers[stoi(id) - 1]->isTA(user->getId())) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(user->getPeopleType() == _PROFESSOR and !all_course_offers[stoi(id) - 1]->isProfessor(user->getId())) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(input_line.size() == COURSE_POST_MODE_SIZE_SECOND and image_address == DEFINE_STRING) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else {\n        if(image_address == DEFINE_STRING) image_address = NULL_STRING;\n        all_course_offers[stoi(id) - 1]->addPost(title, message, image_address, user->getName(), _NORMAL, NULL_STRING, ZERO);\n        addNotificationCoursePost(stoi(id) - 1, id + SPACE + all_course_offers[stoi(id) - 1]->getName() + COLON + SPACE + NEW_COURSE_POST + END_LINE);\n       throw runtime_error(OK);\n\n    }\n}\n\nvoid University::runGetPostCourseChannel(string id = NULL_STRING, string post_id = NULL_STRING) {\n    if(!checkLogin()) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(user->getId() == ZERO_STRING) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(!isNumber(id) || !isNumber(post_id)) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(stoi(post_id) == ZERO || stoi(id) == ZERO) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(stoi(id) >= course_offer_id) {\n        throw runtime_error(NOT_FOUND);\n    }\n    else if(!all_course_offers[stoi(id) - 1]->isInPost(stoi(post_id))) {\n        throw runtime_error(NOT_FOUND);\n    }\n    else if(!all_course_offers[stoi(id) - 1]->isInCourse(user->getId())) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else {\n        showOneCourseOffers(stoi(id) - 1);\n        all_course_offers[stoi(id) - 1]->showOnePostCourseChannel(output, stoi(post_id));\n    }\n}\n\nvoid University::runDeleteCourse(string id) {\n    if(!checkLogin() || !isStudent()) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(!isNumber(id)) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(stoi(id) == 0) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(stoi(id) >= course_offer_id) {\n        throw runtime_error(NOT_FOUND);\n    }\n    else if(!user->hasCourseOfferById(stoi(id))) {\n        throw runtime_error(NOT_FOUND);\n    }\n    else {\n        user->removeCourse(all_course_offers[stoi(id) - 1]->getCourseOfferId());\n        user->shareNotification(user->getId() + SPACE + user->getName() + COLON + SPACE + NEW_DELETE_COURSE + END_LINE);\n        throw runtime_error(OK);\n    }\n}\n\nvoid University::runGetCourse() {\n    if(!checkLogin()) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(user->getId() == ZERO_STRING) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if((int) all_course_offers.size() == 0) {\n        throw runtime_error(EMPTY);\n    }\n    else {\n        showAllCourseOffers();\n    }\n}\n\nvoid University::runGetCourseById(string id) {\n    if(!checkLogin()) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(user->getId() == ZERO_STRING) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(!isNumber(id)) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(stoi(id) == 0) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(stoi(id) >= course_offer_id) {\n        throw runtime_error(NOT_FOUND);\n    }\n    else {\n        showOneCourseOffers(stoi(id) - 1);\n    }\n}\n\n\nvoid University::runConnect(string id) {\n    if(!checkLogin()) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(user->getId() == ZERO_STRING) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(!isNumber(id)) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(!checkValidId(id)) {\n        throw runtime_error(NOT_FOUND);\n    }\n    else if(stoi(id) == 0) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(user->inConnection(id)) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else {\n        user->addConnection(people[findPeopleIndexById(id)]);\n        people[findPeopleIndexById(id)]->addConnection(user);\n        throw runtime_error(OK);\n    }\n}\n\nvoid University::runCloseTAForm(string id) {\n    if(!checkLogin() || !isProfessor(user->getId())) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(!isNumber(id)) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(stoi(id) == 0) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(!user->isTAForm(stoi(id))) {\n        throw runtime_error(NOT_FOUND);\n    }\n    else if(!all_course_offers[user->findCourseByPost(stoi(id)) - 1]->getOpenForm()) {\n        throw runtime_error(NOT_FOUND);\n    }\n    else {\n        askProfessorForTA(user->findCourseByPost(stoi(id)) - 1);\n        user->removePost(stoi(id));\n    }\n}\n\nvoid University::runGetMyCourse() {\n    if(!checkLogin() || !isStudent()) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(user->numberOfCourses() == 0) {\n        throw runtime_error(EMPTY);\n    }\n    else {\n        user->showCourses(output, people);\n    }\n}\n\nvoid University::runPersonalPage(string id) {\n    if(!checkLogin()) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(user->getId() == ZERO_STRING) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(!isNumber(id)) {\n        throw runtime_error(BAD_REQUEST);\n    }\n    else if(!checkValidId(id)) {\n        throw runtime_error(NOT_FOUND);\n    }\n    else {\n        people[findPeopleIndexById(id)]->personalPage(output);\n    }\n}\n\nvoid University::runNotification(){\n    if(!checkLogin()) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(user->getId() == ZERO_STRING) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else if(user->emptyNotification()) {\n        throw runtime_error(EMPTY);\n    }\n    else {\n        user->printNotification(output);\n    }\n}\n\nvoid University::runLogout() {\n    if(!checkLogin()) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else {\n        user = nullptr;\n        throw runtime_error(OK);\n    }\n}\n\nvoid University::runLogin(string id, string password) {\n    if(user != nullptr) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    if(!checkValidId(id)) {\n        throw runtime_error(NOT_FOUND);\n    }\n    else if(!checkValidPassword(id, password)) {\n        throw runtime_error(PERMISSION_DENIED);\n    }\n    else {\n        user = people[findPeopleIndexById(id)];\n        throw runtime_error(OK);\n    }\n}\n\nvoid University::run(string input_string) {\n    input_line = splitByInputSign(input_string, SPACE);\n    try {\n        if(input_line.size() > MIN_INPUT_SIZE) {\n            \n        }\n        else {\n            throw runtime_error(BAD_REQUEST);\n        }\n    } catch (runtime_error &e) {\n        catchError(e);\n    }\n}","filename":"/Users/mahdis/Desktop/AP/AP6/src/University.cpp","identifier":"Text Change","lineCount":501,"languageId":"cpp"},"failed":false}