{"date":"2024-05-31T11:19:20.824Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"content":"#include \"People.hpp\"\n\nPeople::People(string id, string name, Major* major, string password, PeopleType people_type) :\nEntity(id, name), major(major), password(password), people_type(people_type) {\n    post_number = 1;\n    profile_image = NULL_STRING;\n}\n\nbool People::inConnection(string new_id) {\n    for(int i = 0; i < connections.size(); i++) {\n        if(new_id == connections[i]->getId()) return true;\n    }\n    return false;\n}\n\nvoid People::addProfile(string new_profile_image) {\n    profile_image = new_profile_image;\n}\n\nvoid People::addPost(string title, string message, string image_address) {\n    posts.push_back(new Post(title, message, post_number, image_address));\n    post_number++;\n}\n\nvoid People::removePost(int post_id) {\n    for(int i = 0; i < (int) posts.size(); i++) {\n        if(posts[i]->getId() == post_id) {\n            posts.erase(posts.begin() + i);\n            return;\n        }\n    }\n}\n\nbool People::isInPost(int post_id) {\n    for(int i = 0; i < (int) posts.size(); i++) {\n        if(posts[i]->getId() == post_id) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid People::showOnePost(vector<string>& output, int post_id) {\n    for(int i = 0; i < (int) posts.size(); i++) {\n        if(posts[i]->getId() == post_id) {\n            output.push_back(to_string(posts[i]->getId()) + SPACE + posts[i]->getTitle() + SPACE +  posts[i]->getMessage());\n        }\n    }\n    output.push_back(END_LINE);\n}\n\nbool People::validCourseTime(Time new_time) {\n    for(int i = 0; i < course_offers.size(); i++) {\n        if(course_offers[i]->inSameTime(new_time)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool People::validCourseDate(string new_date) {\n    for(int i = 0; i < course_offers.size(); i++) {\n        if(course_offers[i]->getExamTime() == new_date) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid People::removeCourse(int course_offer_id) {\n    for(int i = 0; i < course_offers.size(); i++) {\n        if(course_offers[i]->getCourseOfferId() == course_offer_id) {\n            course_offers.erase(course_offers.begin() + i);\n            return;\n        }\n    }\n}\n\nvoid People::showOfferCourses(vector<string>& output) {\n    for(int i = 0; i + 1 < course_offers.size(); i++) {\n        output.push_back( course_offers[i]->getName() + COMMA);\n    }\n    if(!course_offers.empty()) {\n        output.push_back(course_offers.back()->getName());\n    }\n    output.push_back(END_LINE);\n}\n\nvoid People::showPosts(vector<string>& output) {\n    for(int i = (int) posts.size() - 1; 0 <= i; i--) {\n        output.push_back(to_string(posts[i]->getId()) + SPACE + posts[i]->getTitle() + END_LINE);\n    }\n}\n\nbool People::hasCourseOfferById(int course_id) {\n    for(int i = 0; i < course_offers.size(); i++) {\n        if(course_offers[i]->getCourseOfferId() == course_id) {\n            return true;\n        }\n    }\n    return false;\n }\n\nstring People::getProfessorName(vector<People*> people, string prof_id) {\n    for(int i = 0; i < people.size(); i++) {\n        if(people[i]->getId() == prof_id) {\n            return people[i]->getName();\n        }\n    }\n}\n\nvoid People::showCourses(vector<string>& output, vector<People*> people){\n    for(int i = 0; i < course_offers.size(); i++) {\n        output.push_back(to_string(course_offers[i]->getCourseOfferId()) + SPACE + course_offers[i]->getName() + SPACE);\n        output.push_back(to_string(course_offers[i]->getCapacity()) + SPACE);\n        output.push_back(getProfessorName(people, course_offers[i]->getProfessorId()) + SPACE);\n        output.push_back(course_offers[i]->getTime() + SPACE + course_offers[i]->getExamTime() + SPACE);\n        output.push_back(to_string(course_offers[i]->getClassNumber()) + END_LINE);\n    }\n}\n\nvoid People::addNotification(string notification_line) {\n    notifications.push_back(notification_line);\n}\n\nbool People::emptyNotification() {\n    if(notifications.size() == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nvoid People::shareNotification(string command) {\n    for(int i = 0; i < connections.size(); i++) {\n        connections[i]->addNotification(command);\n    }\n}\n\nvoid People::printNotification(vector<string>& output) {\n    for(int i = (int) notifications.size() - 1; 0 <= i; i--) {\n        output.push_back(notifications[i]);\n    }\n    notifications.clear();\n}","filename":"/Users/mahdis/Desktop/AP/AP6/src/People.cpp","identifier":"Save Document","languageId":"cpp","version":234,"lineCount":146},"failed":false}