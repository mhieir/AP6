{"date":"2024-06-10T10:39:13.261Z","courseId":"17","assignment":"AP-Spring03-CA6-phase3","trace":{"version":116,"content":"#ifndef UNIVERSITY_INCLUDE\n#define UNIVERSITY_INCLUDE\n\n#include \"Global.hpp\"\n#include \"Entity.hpp\"\n#include \"Course.hpp\"\n#include \"Major.hpp\"\n#include \"People.hpp\"\n#include \"Student.hpp\"\n#include \"Professor.hpp\"\n#include \"UTAccount.hpp\"\n#include \"CourseOffer.hpp\"\n\nclass University {\npublic:\n    University(char **argv);\n    ~University() {};\n    void addMajor(string id, string name);\n    void addStudent(string id, string name, Major* major, int semester, string password);\n    void addProfessor(string id, string name, Major* major, string string_position, string password);\n    int findMajor(string id);\n    Major* getMajorById(int index);\n    void addCourse(string id, string name, int credit, int prerequisite, vector<string> majors_id);\n    vector<string> getOutput() {return output;}\n    void cleanOutput() {output.clear();}\n    vector<string> getExtraOutput() {return extra_output;}\n    void cleanExtraOutput() {extra_output.clear();}\n    void makeDefaultConnections();\n    void getExtraInput(vector<bool> result) {closeFormResult = result;}\n    void cleanCloseForm();\n    void runLogin(string id, string password);\n    void runLogout();\n    void runPersonalPage(string id);\n    string getUserProfile() {return user->getProfile();}\n    string getUserName() {return user->getName();}\n    string getUserMajor() {return user->getMajorId();}\n    string getUserName() {return user->getName();}\n    PeopleType peopleStatus() {return user->getPeopleType();}\nprotected:\nprivate:\n    void makeMajorString(vector<string> major_string);\n    void makeStudentString(vector<string> student_string);\n    void makeCourseString(vector<string> course_string);\n    void makeProfessorString(vector<string> professor_string);\n    vector<Major*> majors;\n    vector<People*> people;\n    vector<Course*> courses;\n    vector<string> input_line;\n    vector<CourseOffer*> all_course_offers;\n    vector<string> output;\n    vector<string> extra_output;\n    vector<bool> closeFormResult;\n    People* user;\n    int course_offer_id;\n    int current_course_offer;\n\n    void runGetCourseById(string id);\n    void runGetCourseChannel(string id);\n    void makeExtraOutput(vector<string> requested_TAs, int index);\n    void runCloseTAForm(string id);\n    void runPostTAForm(string course_id, string message);\n\n    void addNotificationCoursePost(int index, string notification_line);\n    void runCoursePost(string id, string title, string message, string image_address);\n    void runAddProfile(string address);\n    void runNotification();\n    void runGetMyCourse();\n    void runDeleteCourse(string id);\n    bool isStudent();\n    void runPutCourse(string id);\n    void runGetPost(string id, string post_id);\n    void runGetCourse();\n    bool inCommonTime(string professor_id, string time);\n    bool isPresentByProfessor(string professor_id, string course_id);\n    int findCourseIndexById(string id);\n    int findPeopleIndexById(string id);\n    bool isProfessor(string id);\n    bool checkValidCourse(string id);\n    void runSharePost(string title, string message, string image_address);\n    void runRemovePost(string id);\n    void runShareCourse(string course_id, string professor_id, string capacity, string time, string exam_date, string class_number);\n    bool checkLogin();\n    bool checkValidPassword(string id, string password);\n    bool checkValidId(string id);\n    void runConnect(string id);\n    \n    void showAllCourseOffers();\n    void showOneCourseOffers(int index);\n    void catchError(runtime_error& ex);\n    void askProfessorForTA(int index);\n    void runTARequest(string professor_id, string form_id );\n    void runGetPostCourseChannel(string id, string post_id);\n};\n\n#endif","filename":"/Users/mahdis/Desktop/AP/AP6/code/include/University.hpp","identifier":"Text Change","lineCount":95,"languageId":"cpp"},"failed":false}