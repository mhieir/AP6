{"date":"2024-05-20T22:58:31.060Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"version":4280,"content":"#include \"University.hpp\"\n#include \"Primary.hpp\"\n\nvoid University::makeMajorString(vector<string> major_string) {\n    for(int i = 1; i < major_string.size(); i++) {\n        vector<string> splitted = splitByInputSign(major_string[i], COMMA);\n        majors.push_back(new Major(splitted[0], splitted[1]));\n    }\n}\n\nvoid University::makeStudentString(vector<string> student_string) {\n    for(int i = 1; i < student_string.size(); i++) {\n        vector<string> splitted = splitByInputSign(student_string[i], COMMA);\n        people.push_back(new Student(splitted[0], splitted[1], splitted[2], stoi(splitted[3]), splitted[4]));\n    }\n}\n\nvoid University::makeCourseString(vector<string> course_string) {\n    for(int i = 1; i < course_string.size(); i++) {\n        vector<string> splitted = splitByInputSign(course_string[i], COMMA);\n        courses.push_back(new Course(splitted[0], splitted[1], stoi(splitted[2]), stoi(splitted[3]), splitByInputSign(splitted[4], SEMI_COLON)));\n    }\n}\n\nvoid University::makeProfessorString(vector<string> professor_string) {\n    for(int i = 1; i < professor_string.size(); i++) {\n        vector<string> splitted = splitByInputSign(professor_string[i], COMMA);\n        people.push_back(new Professor(splitted[0], splitted[1], splitted[2], splitted[3], splitted[4]));\n    }\n}\n\nUniversity::University(char *argv[]) {\n    makeMajorString(read_csv(argv[1]));\n    makeStudentString(read_csv(argv[2]));\n    makeCourseString(read_csv(argv[3]));\n    makeProfessorString(read_csv(argv[4]));\n    user = nullptr;\n}\n\nvoid University::checkNotInLoginMode() {\n    try {\n        if(user != nullptr) {\n            throw runtime_error(PERMISSION_DENIED);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::checkPassword(People* person, string password) {\n    try {\n        if(person->getPassword() == password) {\n            user = person;\n        }\n        else {\n            throw runtime_error(PERMISSION_DENIED);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::checkValidInfo(string id, string password) {\n    try {\n        for(int i = 0; i < people.size(); i++) {\n            if(people[i]->getId() == id) {\n                checkPassword(people[i], password);\n            }\n        }\n        if(user == nullptr) {\n            throw runtime_error(NOT_FOUND);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::loginModeInput() {\n    string id = NULL_STRING, password = NULL_STRING;\n    for(int i = 0; i < 2; i++) {\n        try {\n            string input_type, value;\n            cin >> input_type >> value;\n            if(input_type == ID) {\n                id = value;\n            }\n            else if(input_type == PASSWORD) {\n                password = value;\n            }\n            else {\n                throw runtime_error(PERMISSION_DENIED);\n            }\n        } catch(runtime_error& ex) {\n            catchError(ex);\n        }\n    }\n    checkValidInfo(id, password);\n}\n\nvoid University::handleLoginMode() {\n    checkNotInLoginMode();\n    loginModeInput();\n}\n\nvoid University::checkNotInLogoutMode() {\n    try {\n        if(user != nullptr) {\n            \n        }\n        else {\n            throw runtime_error(PERMISSION_DENIED);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::handleLogoutMode() {\n    checkNotInLogoutMode();\n    checkQuestionMark();\n    okMode();\n}\n\nvoid checkQuestionMarkLogin() {\n    \n}\n\nvoid University::handlePostRequest() {\n    try {\n        if(input_line[1] == LITTLE_POST) {\n            checkQuestionMark(input_line[2]);\n        }\n        else if(input_line[1] == LOGIN) {\n            checkQuestionMark(input_line[2]);\n            handleLoginMode();\n        }\n        else if(input_line[1] == LOGOUT) {\n            checkQuestionMark(input_line[2]);\n            handleLogoutMode();\n        }\n        else if(input_line[1] == CONNECT) {\n            checkQuestionMark(input_line[2]);\n        }\n        else if(input_line[1] == COURSE_OFFER) {\n            checkQuestionMark(input_line[2]);\n        }\n        else {\n            throw runtime_error(NOT_FOUND);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::handleInput() {\n    try {\n        if(input_line[0] == GET) {\n            handleGetRequest();\n        }\n        else if(input_line[0] == POST) {\n            handlePostRequest();\n        }\n        else if(input_line[0] == PUT) {\n            handlePutRequest();\n        }\n        else if(input_line[0] == DELETE) {\n            handleDeleteRequest();\n        }\n        else {\n            throw runtime_error(BAD_REQUEST);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::checkInputSize() {\n    try {\n        if(input_line.size() == LOGIN_MODE_SIZE) {\n            handleInput();\n        }\n        else {\n            throw runtime_error(BAD_REQUEST);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::getInput() {\n    string input_string;\n    getline(cin, input_string);\n\tinput_line = splitByInputSign(input_string, SPACE);\n}\n\nvoid University::run() {\n    while(true) {\n        getInput();\n        checkInputSize();\n        if(user != nullptr) cout << user->getId() << endl;\n    }\n}","filename":"/Users/mahdis/Desktop/AP/AP6/src/University.cpp","identifier":"Text Change","lineCount":202,"languageId":"cpp"},"failed":true}