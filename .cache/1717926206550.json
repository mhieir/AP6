{"date":"2024-06-09T09:43:21.620Z","courseId":"17","assignment":"AP-Spring03-CA6-phase3","trace":{"content":"#include \"request.hpp\"\n\n\n#include \"Global.hpp\"\n#include \"strutils.hpp\"\n\nconst std::unordered_map<std::string, Request::Method> Request::methodMap_ = {\n    {\"GET\", Request::Method::GET},\n    {\"POST\", Request::Method::POST},\n    {\"PUT\", Request::Method::PUT},\n    {\"DEL\", Request::Method::DEL},\n};\n\nRequest::Request(Method method)\n    : method_(method) {}\n\nRequest::Request(const std::string& method)\n    : Request(Method::GET) {\n    auto itr = methodMap_.find(method);\n    if (itr != methodMap_.end()) {\n        method_ = itr->second;\n    }\n}\n\nRequest::Method Request::getMethod() const {\n    return method_;\n}\n\nstd::string Request::getPath() const {\n    return path_;\n}\n\nstd::string Request::getHeader(const std::string& key) const {\n    auto itr = headers_.find(key);\n    if (itr == headers_.end()) {\n        return {};\n    }\n    return utils::urlDecode(itr->second);\n}\n\nstd::string Request::getBody() const {\n    std::string result;\n    for (auto itr = body_.begin(); itr != body_.end(); ++itr) {\n        result += itr->first + \"=\" + itr->second + \"&\";\n    }\n    return result;\n}\n\nstd::string Request::getQueryParam(const std::string& key) const {\n    auto itr = query_.find(key);\n    if (itr == query_.end()) {\n        return {};\n    }\n    return utils::urlDecode(itr->second);\n}\n\nstd::string Request::getBodyParam(const std::string& key) const {\n    auto bodyType = bodyTypes_.find(key);\n    auto itr = body_.find(key);\n    if (bodyType == bodyTypes_.end() || itr == body_.end()) {\n        return {};\n    }\n\n    if (bodyType->second == \"application/x-www-form-urlencoded\") {\n        return utils::urlDecode(itr->second);\n    }\n    return itr->second;\n}\n\nstatic void trim(std::string& s) {\n    s.erase(std::remove(s.begin(), s.end(), ' '), s.end());\n}\n\nstd::string Request::getSessionId() const {\n    std::string cookie = getHeader(\"cookie\");\n    if (cookie.empty()) {\n        return {};\n    }\n    trim(cookie);\n    std::vector<std::string> v = strutils::split(cookie, \";\");\n    for (std::string kv : v) {\n        trim(kv);\n        std::vector<std::string> k = strutils::split(kv, \"=\");\n        if (k[0] == \"sessionId\") {\n            return k[1];\n        }\n    }\n    return {};\n}\n\nvoid Request::setPath(const std::string& path) {\n    path_ = path;\n}\n\nvoid Request::setHeader(const std::string& key, const std::string& value, bool encode) {\n    headers_[key] = encode ? utils::urlEncode(value) : value;\n}\n\nvoid Request::setBody(const std::string& body) {\n    body_ = utils::getCimapFromString(body);\n}\n\nvoid Request::setQueryParam(const std::string& key, const std::string& value, bool encode) {\n    query_[key] = encode ? utils::urlEncode(value) : value;\n}\n\nvoid Request::setBodyParam(const std::string& key, const std::string& value, const std::string& contentType, bool encode) {\n    body_[key] = encode ? utils::urlEncode(value) : value;\n    bodyTypes_[key] = contentType;\n}\n\nvoid Request::log() const {\n    const std::string NC = \"\\033[0;39m\";\n    const std::string K = \"\\033[1m\";\n    const std::string H = \"\\033[33;1m\";\n\n    std::string log;\n    log += H + \"------- Request --------\" + NC + \"\\n\";\n    log += K + \"Method: \" + NC + (method_ == Method::POST ? \"POST\" : \"GET\") + \"\\n\";\n    log += K + \"Path:   \" + NC + path_ + \"\\n\";\n    log += K + \"SessionId: \" + NC + this->getSessionId() + \"\\n\";\n\n    log += K + \"Headers:\" + NC + \"\\n\";\n    for (auto itr = headers_.begin(); itr != headers_.end(); itr++) {\n        log += \"  \" + utils::urlDecode(itr->first) + \": \" + utils::urlDecode(itr->second) + \"\\n\";\n    }\n\n    log += K + \"Query:\" + NC + \"\\n\";\n    for (auto itr = query_.begin(); itr != query_.end(); itr++) {\n        log += \"  \" + utils::urlDecode(itr->first) + \": \" + utils::urlDecode(itr->second) + \"\\n\";\n    }\n\n    log += K + \"Body:\" + NC + \"\\n\";\n    for (auto itr = body_.begin(); itr != body_.end(); itr++) {\n        std::string type = bodyTypes_.find(itr->first)->second;\n        if (type == \"application/x-www-form-urlencoded\" || type == \"text/plain\") {\n            log += \"  \" + utils::urlDecode(itr->first) + \": \" + utils::urlDecode(itr->second) + \"\\n\";\n        }\n        else {\n            log += \"  \" + utils::urlDecode(itr->first) + \": <BINARY DATA>\\n\";\n        }\n    }\n    log += H + \"------------------------\" + NC + \"\\n\";\n    std::clog << log << std::endl;\n}\n","filename":"/Users/mahdis/Desktop/AP/AP6/src/request.cpp","identifier":"Save Document","languageId":"cpp","version":4,"lineCount":146},"failed":false}