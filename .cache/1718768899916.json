{"date":"2024-06-19T03:48:11.939Z","courseId":"17","assignment":"AP-Spring03-CA6-phase3","trace":{"content":"#include \"handlers.hpp\"\n#include \"DynamicHTML.hpp\"\n\nLoginHandler::LoginHandler(University *university): university(university) {}\nLogoutHandler::LogoutHandler(University *university): university(university) {}\nPersonalPageHandler::PersonalPageHandler(University *university): university(university) {}\nGetCourseByIdHandler::GetCourseByIdHandler(University *university): university(university) {}\nGetAllCoursesHandler::GetAllCoursesHandler(University *university): university(university) {}\nPutCourseHandler::PutCourseHandler(University *university): university(university) {}\nDeleteCourseHandler::DeleteCourseHandler(University *university): university(university) {}\nSharePostHandler::SharePostHandler(University *university): university(university) {}\nChangeProfileHandler::ChangeProfileHandler(University *university, Server* server): server(server), university(university) {}\nMyCoursesHandler::MyCoursesHandler(University *university): university(university) {}\nCourseOfferHandler::CourseOfferHandler(University *university): university(university) {}\nBackHomeHandler::BackHomeHandler(University *university): university(university) {}\n\nResponse* catchError(exception& e) {\n    if(e.what() == OK) {\n        Response* res = Response::redirect(OK_PAGE);\n        return res;\n    }\n    else if(e.what() == PERMISSION_DENIED) {\n        Response* res = Response::redirect(PERMISSION_DENIED_PAGE);\n        return res;\n    }\n    else if(e.what() == BAD_REQUEST) {\n        Response* res = Response::redirect(BAD_REQUEST_PAGE);\n        return res;\n    }\n    else if(e.what() == EMPTY) {\n        Response* res = Response::redirect(EMPTY_PAGE);\n        return res;\n    }\n    else {\n        Response* res = Response::redirect(NOT_FOUND_PAGE);\n        return res;\n    }\n}\n\nResponse* findPeopleType(University* university, string username) {\n    PeopleType people_type = university->peopleStatus(username);\n    if(people_type == _STUDENT) {\n        string body = studentPage(username, university);\n        Response* res = new Response();\n        res->setHeader(HTML_HEADER_FILE_FIRST, HTML_HEADER_FILE_SECOND);\n        res->setBody(body);\n        if(!university->checkLogin()) res->setSessionId(SID);\n        return res;\n    }\n    else if(people_type == _PROFESSOR) {\n        string body = professorPage(username, university);\n        Response* res = new Response();\n        res->setHeader(HTML_HEADER_FILE_FIRST, HTML_HEADER_FILE_SECOND);\n        res->setBody(body);\n        if(!university->checkLogin()) res->setSessionId(SID);\n        return res;\n    }\n    else {\n        string body = adminPage(username, university);\n        Response* res = new Response();\n        res->setHeader(HTML_HEADER_FILE_FIRST, HTML_HEADER_FILE_SECOND);\n        res->setBody(body);\n        if(!university->checkLogin()) res->setSessionId(SID);\n        return res;\n    }\n}\n\nResponse* LoginHandler::callback(Request* req) {\n    try {\n        string username = req->getBodyParam(USERNAME);\n        string password = req->getBodyParam(PASSWORD);\n        university->runLogin(username, password);\n        return findPeopleType(university, username);\n    }\n    catch (runtime_error& e) {\n        return catchError(e);\n    }\n}\n\nResponse* LogoutHandler::callback(Request* req) {\n    try {\n        university->runLogout();\n        Response* res = Response::redirect(HOME_PAGE);\n        return res;\n    }\n    catch (runtime_error& e) {\n        return catchError(e);\n    }\n}\n\nResponse* PersonalPageHandler::callback(Request* req) {\n    try {\n        string username = req->getBodyParam(ID);\n        university->runPersonalPage(username);\n        vector<string> output = university->getOutput();\n        string body = showPersonalPage(university, output, university->peopleStatus(username));\n        Response* res = new Response();\n        res->setHeader(HTML_HEADER_FILE_FIRST, HTML_HEADER_FILE_SECOND);\n        res->setBody(body);\n        return res;\n    }\n    catch (runtime_error& e) {\n        return catchError(e);\n    }\n}\n\nResponse* GetCourseByIdHandler::callback(Request* req) {\n    try {\n        string id = req->getBodyParam(ID);\n        university->runGetCourseById(id);\n        vector<string> output = university->getOutput();\n        string body = showOneCourse(output);\n        Response* res = new Response();\n        res->setHeader(HTML_HEADER_FILE_FIRST, HTML_HEADER_FILE_SECOND);\n        res->setBody(body);\n        return res;\n    }\n    catch (runtime_error& e) {\n        return catchError(e);\n    }\n}\n\nResponse* GetAllCoursesHandler::callback(Request* req) {\n    try {\n        university->runGetCourse();\n        vector<string> output = university->getOutput();\n        string body = showAllCourse(output);\n        Response* res = new Response();\n        res->setHeader(HTML_HEADER_FILE_FIRST, HTML_HEADER_FILE_SECOND);\n        res->setBody(body);\n        return res;\n    }\n    catch (runtime_error& e) {\n        return catchError(e);\n    }\n}\n\nResponse* PutCourseHandler::callback(Request* req) {\n    try {\n        string id = req->getBodyParam(ID);\n        university->runPutCourse(id);\n        Response* res = Response::redirect(OK_PAGE);\n        return res;\n    }\n    catch (runtime_error& e) {\n        return catchError(e);\n    }\n}\n\nResponse* DeleteCourseHandler::callback(Request* req) {\n    try {\n        string id = req->getBodyParam(ID);\n        university->runDeleteCourse(id);\n        Response* res = Response::redirect(OK_PAGE);\n        return res;\n    }\n    catch (runtime_error& e) {\n        return catchError(e);\n    }\n}\n\nResponse* SharePostHandler::callback(Request* req) {\n    try {\n        string title = req->getBodyParam(TITLE);\n        string message = req->getBodyParam(MESSAGE);\n        string file_name = req->getBodyParam(FILE_NAME);\n        university->runSharePost(title, message, file_name + PNG);\n        Response* res = Response::redirect(HOME_PAGE);\n        return res;\n    }\n    catch (runtime_error& e) {\n        return catchError(e);\n    }\n}\n\nResponse* ChangeProfileHandler::callback(Request* req) {\n    try {\n        string file_name = req->getBodyParam(FILE_NAME);\n        string file = req->getBodyParam(FILE_TITLE);\n        utils::writeToFile(file, \"./static/\" + file_name);\n        server->get(\"/\" + file_name, new ShowImage(\"static/\" + file_name));\n        university->runAddProfile(file_name + PNG);\n        Response* res = Response::redirect(HOME_PAGE);\n        return res;\n    }\n    catch (runtime_error& e) {\n        return catchError(e);\n    }\n}\n\nResponse* MyCoursesHandler::callback(Request* req) {\n    try {\n        university->runGetMyCourse();\n        vector<string> output = university->getOutput();\n        string body = showMyCourse(output);\n        Response* res = new Response();\n        res->setHeader(HTML_HEADER_FILE_FIRST, HTML_HEADER_FILE_SECOND);\n        res->setBody(body);\n        return res;\n    }\n    catch (runtime_error& e) {\n        return catchError(e);\n    }\n}\n\nResponse* CourseOfferHandler::callback(Request* req) {\n    try {\n        string course_id = req->getBodyParam(COURSE_ID);\n        string professor_id = req->getBodyParam(PROFESSOR_ID);\n        string capacity = req->getBodyParam(CAPACITY);\n        string time = req->getBodyParam(TIME);\n        string exam_date = req->getBodyParam(EXAM_DATE);\n        string class_number = req->getBodyParam(CLASS_NUMBER);\n        university->runShareCourse(course_id, professor_id, capacity, time, exam_date, class_number);\n        Response* res = Response::redirect(HOME_PAGE);\n        return res;\n    }\n    catch (runtime_error& e) {\n        return catchError(e);\n    }\n}\n\nResponse* BackHomeHandler::callback(Request* req) {\n    if(university->checkLogin()) {\n        return findPeopleType(university, university->getUserId());\n    }\n    else {\n        Response* res = Response::redirect(LOGIN_PAGE);\n        return res;\n    }\n}","filename":"/Users/mahdis/Desktop/AP/AP6/code/src/handlers.cpp","identifier":"Save Document","languageId":"cpp","version":21,"lineCount":231},"failed":false}