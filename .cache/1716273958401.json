{"date":"2024-05-21T06:36:27.456Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"content":"#include \"University.hpp\"\n#include \"Primary.hpp\"\n\nvoid University::makeMajorString(vector<string> major_string) {\n    for(int i = 1; i < major_string.size(); i++) {\n        vector<string> splitted = splitByInputSign(major_string[i], COMMA);\n        majors.push_back(new Major(splitted[0], splitted[1]));\n    }\n}\n\nvoid University::makeStudentString(vector<string> student_string) {\n    for(int i = 1; i < student_string.size(); i++) {\n        vector<string> splitted = splitByInputSign(student_string[i], COMMA);\n        people.push_back(new Student(splitted[0], splitted[1], splitted[2], stoi(splitted[3]), splitted[4]));\n    }\n}\n\nvoid University::makeCourseString(vector<string> course_string) {\n    for(int i = 1; i < course_string.size(); i++) {\n        vector<string> splitted = splitByInputSign(course_string[i], COMMA);\n        courses.push_back(new Course(splitted[0], splitted[1], stoi(splitted[2]), stoi(splitted[3]), splitByInputSign(splitted[4], SEMI_COLON)));\n    }\n}\n\nvoid University::makeProfessorString(vector<string> professor_string) {\n    for(int i = 1; i < professor_string.size(); i++) {\n        vector<string> splitted = splitByInputSign(professor_string[i], COMMA);\n        people.push_back(new Professor(splitted[0], splitted[1], splitted[2], splitted[3], splitted[4]));\n    }\n}\n\nUniversity::University(char *argv[]) {\n    makeMajorString(read_csv(argv[1]));\n    makeStudentString(read_csv(argv[2]));\n    makeCourseString(read_csv(argv[3]));\n    makeProfessorString(read_csv(argv[4]));\n    user = nullptr;\n}\n\nbool University::checkValidPassword(string id, string password) {\n    for(int i = 0; i < people.size(); i++) {\n        if(people[i]->getId() == id and people[i]->getPassword() == password) {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool University::checkValidId(string id) {\n    for(int i = 0; i < people.size(); i++) {\n        if(people[i]->getId() == id) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid University::findPeopleById(string id) {\n    for(int i = 0; i < people.size(); i++) {\n        if(people[i]->getId() == id) {\n            user = people[i];\n        }\n    }\n}\n\nvoid University::loginModeInput() {\n    string id = NULL_STRING, password = NULL_STRING;\n    for(int i = 3; i < 7; i += 2) {\n        string input_type = input_line[i], value = input_line[i + 1];\n        if(input_type == ID) {\n            id = value;\n        }\n        else if(input_type == PASSWORD) {\n            password = value;\n        }\n    }\n    try {\n        if(!checkValidId(id)) {\n            throw runtime_error(NOT_FOUND);\n        }\n        else if(!checkValidPassword(id, password)) {\n            throw runtime_error(PERMISSION_DENIED);\n        }\n        else {\n            findPeopleById(id);\n            throw runtime_error(OK);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::checkNotInLoginMode() {\n    try {\n        if(user == nullptr) {\n            loginModeInput();\n        }\n        else {\n            throw runtime_error(PERMISSION_DENIED);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::checkQuestionMarkLogin() {\n    try {\n        if(input_line[2] == QUESTION_MARK) {\n            checkNotInLoginMode();\n        }\n        else {\n            throw runtime_error(BAD_REQUEST);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::checkNotInLogoutMode() {\n    try {\n        if(user != nullptr) {\n            user = nullptr;\n            throw runtime_error(OK);\n        }\n        else {\n            throw runtime_error(PERMISSION_DENIED);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::checkQuestionMarkLogout() {\n    try {\n        if(input_line[2] == QUESTION_MARK) {\n            checkNotInLogoutMode();\n        }\n        else {\n            throw runtime_error(BAD_REQUEST);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::checkInputSizeLogin() {\n    try {\n        if(input_line.size() == LOGIN_MODE_SIZE) {\n            checkQuestionMarkLogin();\n        }\n        else {\n            throw runtime_error(BAD_REQUEST);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::checkInputSizeLogout() {\n    try {\n        if(input_line.size() == LOGOUT_MODE_SIZE) {\n            checkQuestionMarkLogout();\n        }\n        else {\n            throw runtime_error(BAD_REQUEST);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::handlePostRequest() {\n    try {\n        if(input_line[1] == LITTLE_POST) {\n            checkQuestionMark();\n        }\n        else if(input_line[1] == LOGIN) {\n            checkInputSizeLogin();\n        }\n        else if(input_line[1] == LOGOUT) {\n            checkInputSizeLogout();\n        }\n        else if(input_line[1] == CONNECT) {\n            checkQuestionMark();\n        }\n        else if(input_line[1] == COURSE_OFFER) {\n            checkQuestionMark();\n        }\n        else {\n            throw runtime_error(NOT_FOUND);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::handleInput() {\n    try {\n        if(input_line[0] == GET) {\n            handleGetRequest();\n        }\n        else if(input_line[0] == POST) {\n            handlePostRequest();\n        }\n        else if(input_line[0] == PUT) {\n            handlePutRequest();\n        }\n        else if(input_line[0] == DELETE) {\n            handleDeleteRequest();\n        }\n        else {\n            throw runtime_error(BAD_REQUEST);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::checkInputSize(string input_string) {\n    input_line = splitByInputSign(input_string, SPACE);\n    try {\n        if(input_line.size() > 0) {\n            handleInput();\n        }\n        else {\n            throw runtime_error(BAD_REQUEST);\n        }\n    } catch(runtime_error& ex) {\n        catchError(ex);\n    }\n}\n\nvoid University::run() {\n    string line;\n    while (getline(cin, line)) {\n        try {\n            checkInputSize(line);\n        } catch (exception &e) {\n        cout << BAD_REQUEST << endl;\n        }\n    }\n}","filename":"/Users/mahdis/Desktop/AP/AP6/src/University.cpp","identifier":"Save Document","languageId":"cpp","version":711,"lineCount":242},"failed":true}