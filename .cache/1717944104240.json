{"date":"2024-06-09T14:41:39.742Z","courseId":"17","assignment":"AP-Spring03-CA6-phase3","trace":{"content":"#pragma once\n#ifndef HANDLERS_HPP_INCLUDE\n#define HANDLERS_HPP_INCLUDE\n\n#include \"Global.hpp\"\n#include \"server.hpp\"\n#include \"University.hpp\"\n\nconst string SHOW_SERVER_PORT = \"Server running on port: \";\n\nclass Handle : public RequestHandler{\npublic:\n    Handle() {};\n    Handle(char *argv[], int port = 8000);\n    ~Handle() {};\n    virtual Response* callback(Request* req) {};\n    void run();\nprotected:\n    University* university;\n    Server* server;\nprivate:\n    void mapServerPaths();\n};\n\nclass RandomNumberHandler : public Handle {\npublic:\n    RandomNumberHandler(int x) {};\n    ~RandomNumberHandler() {};\n    Response* callback(Request*) override;\n    int y;\n};\n\nclass LoginHandler : public Handle {\npublic:\n    LoginHandler() {};\n    ~LoginHandler() {};\n    Response* callback(Request*) override;\n};\n\nclass UploadHandler : public Handle {\npublic:\n    UploadHandler() {};\n    ~UploadHandler() {};\n    Response* callback(Request*) override;\n};\n\nclass ColorHandler : public TemplateHandler {\npublic:\n    ColorHandler(const std::string& filePath);\n    std::map<std::string, std::string> handle(Request* req) override;\n};\n\n#endif // HANDLERS_HPP_INCLUDE\n","filename":"/Users/mahdis/Desktop/AP/AP6/code/include/handlers.hpp","identifier":"Save Document","languageId":"cpp","version":503,"lineCount":54},"failed":false}